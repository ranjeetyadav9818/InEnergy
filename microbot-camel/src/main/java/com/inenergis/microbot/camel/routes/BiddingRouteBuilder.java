package com.inenergis.microbot.camel.routes;

import com.inenergis.entity.bidding.Bid;
import com.inenergis.entity.bidding.Segment;
import com.inenergis.entity.genericEnum.BidStatus;
import com.inenergis.entity.genericEnum.ElectricalUnit;
import com.inenergis.network.pgerestclient.PgeLayer7;
import com.inenergis.network.pgerestclient.PgeLayer7Emulator;
import com.inenergis.network.pgerestclient.model.BidResponseModel;
import com.inenergis.network.pgerestclient.model.BidStatusResponseModel;
import com.inenergis.util.ConstantsProviderModel;
import com.inenergis.util.EnergyUtil;
import org.apache.camel.Exchange;
import org.apache.camel.Processor;
import org.apache.camel.builder.RouteBuilder;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.stereotype.Component;

import java.io.IOException;
import java.util.Date;
import java.util.Properties;

import static com.inenergis.entity.bidding.BidHelper.SEGMENT_NAME;

@Component
public class BiddingRouteBuilder extends RouteBuilder {


    @Value("${layer7.mocked}")
    private boolean layer7Mocked;

    @Autowired
    @Qualifier("appProperties")
    private Properties properties;

    @Override
    public void configure() throws Exception {

        from("quartz2://createBidsScheduler?cron=0+5+*+*+*+?").id("createBidsScheduler") // no need of error handling as if it failed before queue connection bids will be reloaded in the next trigger
            .to("bean:resourceService?method=getRegistrationsWithAutobidEnabled")
            .to("bean:bidService?method=getNextBids")
            .to("bean:bidService?method=filterBidsToSave")
            .split().body()
            .to("jpa:com.inenergis.entity.bidding.Bid")
            .log("bid for ${body.isoResource.name}, trade date: ${body.tradeDate} autogenerated");

        from("quartz2://resetBidsScheduler?cron=0+0/30+*+*+*+?").id("bidResetter")
            .to("bean:bidService?method=getAwaitingCreatedBids")
            .split().body()
            .to("bean:bidService?method=resetBid")
            .log("bid for ${body.isoResource.name}, trade date: ${body.tradeDate} reset");

        from("quartz2://sendBidsScheduler?cron=30+0/2+*+*+*+?").id("sendBidsScheduler")
            .to("bean:bidService?method=getBidsToSend")
            .split().body()
            .process(new SendBidProcessor())
            .to("jpa:com.inenergis.entity.bidding.Bid")
            .log("bid for ${body.isoResource.name}, trFade date: ${body.tradeDate} sent to FBS. Status: ${body.status}");

        from("quartz2://checkBidStatus?cron=45+0/2+*+*+*+?").id("checkBidStatus") // this is quartz no need of further error handling
            .to("bean:bidService?method=getPendingBids")
            .split().body()
            .process(new CheckStatusBidProcessor())
            .to("jpa:com.inenergis.entity.bidding.Bid")
            .log("bid for ${body.isoResource.name}, trade date: ${body.tradeDate} updated from FBS. Status: ${body.status}");

    }

    public PgeLayer7 getPgeLayer7() throws IOException {
        if (layer7Mocked) {
            return new PgeLayer7Emulator(properties);
        } else {
            return new PgeLayer7(properties);
        }
    }

    private class CheckStatusBidProcessor implements Processor {
        @Override
        public void process(Exchange exchange) throws Exception {
            Bid bid = (Bid) exchange.getIn().getBody();
            BidStatusResponseModel bidStatus = getPgeLayer7().getBidStatus(bid.getIsoResource().getName(), getTradeDateString(bid));
            boolean exceptionsInTheBid = false;
            boolean allBidsProcessed = true;
            boolean atLeastOneHEReceived = false;
            for (Segment segment : bid.getSegments()) {
                for (BidStatusResponseModel.Bid bidResponse : bidStatus.getBids().get("Bid")) {
                    atLeastOneHEReceived = true;
                    segment.setStatusHe(Integer.valueOf(bidResponse.getHe()),bidResponse.getStatus());
                    segment.setIsoMessagesHe(Integer.valueOf(bidResponse.getHe()),bidResponse.getCaisoMessage());
                    if(bidResponse.getStatus().equals("INVALID") || bidResponse.getStatus().equals("REJECTED")){
                        exceptionsInTheBid = true;
                    }else if (!bidResponse.getStatus().equals("OK")) {
                        allBidsProcessed = false;
                    }
                }
            }
            bid.setDetailedStatus(bidStatus.getResponseCode()+" - "+bidStatus.getResponseMessage());
            if(exceptionsInTheBid){
                bid.setStatus(BidStatus.EXCEPTIONS);
            }else if(!allBidsProcessed || !atLeastOneHEReceived){
                bid.setStatus(BidStatus.SUBMITTED);
            }else{
                bid.setStatus(BidStatus.ACCEPTED);
            }
        }
    }

    private String getTradeDateString(Bid bid) {
        String string = bid.getTradeLocalDate().atStartOfDay(ConstantsProviderModel.CUSTOMER_TIMEZONE_ID).toString();
        return string.substring(0,string.indexOf("["));
    }

    private class SendBidProcessor implements Processor {
        @Override
        public void process(Exchange exchange) throws Exception {
            Bid bid = (Bid) exchange.getIn().getBody();
            BidResponseModel bidResponse = getPgeLayer7().bid(bid, getTradeDateString(bid));
            if (bidResponse.isSuccess()) {
                bid.setStatus(BidStatus.SUBMITTED);
                bid.setScheduleModified(false);
                bid.setSubmittedTime(new Date());
                bid.setSubmittedBy("System");
            }else {
                bid.setStatus(BidStatus.DELIVERY_ERROR);
                bid.setDetailedStatus(bidResponse.getResponseMessage());
            }
            if(bidResponse.getPackage()!=null){
                for (Segment segment : bid.getSegments()) {
                    for (BidResponseModel.Bid bidPackage : bidResponse.getPackage()) {
                        if(segment.getName().equals(SEGMENT_NAME + bidPackage.getSegment())){
                            segment.setStatusHe(Integer.valueOf(bidPackage.getHe()),bidPackage.getStatus());
                            segment.setIsoMessagesHe(Integer.valueOf(bidPackage.getHe()),bidPackage.getErrorMessage());
                            segment.setCapacityHe(Integer.valueOf(bidPackage.getHe()), EnergyUtil.parseToWatts(bidPackage.getMw(), ElectricalUnit.MW));
                            segment.setPriceHe(Integer.valueOf(bidPackage.getHe()), Long.valueOf(bidPackage.getPrice())*100L);//transform to cents
                        }
                    }
                }
            }
        }
    }
}
